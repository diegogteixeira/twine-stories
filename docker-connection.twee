:: StoryTitle
The Case of the Failed Docker Connection

:: StoryData
{
	"ifid": "01A7E9EF-B6EB-4372-A7FC-68EF8AAAC0E9",
	"format": "SugarCube",
	"format-version": "2.30.0",
	"start": "Start",
	"zoom": 1
}

:: Start

<<init>>

<p>
Hello! This is a mystery where your goal is to solve a debugging problem!
You'll collect clues, interpret evidence, and ultimately solve the Case of the
Slow Websites!
</p>

<p>
In the sidebar, you'll notice a "What you know" list. As you collect more
clues, the list will update with what you've learned.
</p>

<p>
Click "Start" to get started.
</p>


[[Start->Landing]]

:: Landing

<p>
You're working on a Python web service, and you decide you need a local cache
for some data. You decide to use Redis, and so you set up Redis on your
computer with Docker Compose.
</p>

<p>
But when you add the Redis code and try to load a page from your server, you get a
500 internal server error.
</p>

[[Read the error logs -> Error]]

:: Error

This is the error message your Python service prints out every time you make a request:

<pre>
backend_1  | redis.exceptions.ConnectionError: Error 99 connecting <br>
to localhost:36379. Cannot assign requested address.
</pre>

That's useful -- we've learned something already!

<<newinfo "The Python program can't connect to localhost:36379">>


<div class="nav">
[[Read the full error logs -> Read more logs]]
[[Look at your Python code -> Python program]]
</div>

:: Read more logs

<html>
<pre>
backend_1  | [2021-11-08 21:30:44,180] ERROR in app: Exception on /count [GET] <br>
backend_1  | Traceback (most recent call last): <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/connection.py", line 559, in connect <br>
backend_1  |     sock = self._connect() <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/connection.py", line 615, in _connect <br>
backend_1  |     raise err <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/connection.py", line 603, in _connect <br>
backend_1  |     sock.connect(socket_address) <br>
backend_1  | OSError: [Errno 99] Cannot assign requested address <br>
backend_1  |  <br>
backend_1  | During handling of the above exception, another exception occurred: <br>
backend_1  |  <br>
backend_1  | Traceback (most recent call last): <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 2073, in wsgi_app <br>
backend_1  |     response = self.full_dispatch_request() <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1518, in full_dispatch_request <br>
backend_1  |     rv = self.handle_user_exception(e) <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1516, in full_dispatch_request <br>
backend_1  |     rv = self.dispatch_request() <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1502, in dispatch_request <br>
backend_1  |     return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args) <br>
backend_1  |   File "/code.py", line 10, in count <br>
backend_1  |     r.incr('hits') <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/client.py", line 1641, in incr <br>
backend_1  |     return self.incrby(name, amount) <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/client.py", line 1650, in incrby <br>
backend_1  |     return self.execute_command('INCRBY', name, amount) <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/client.py", line 898, in execute_command <br>
backend_1  |     conn = self.connection or pool.get_connection(command_name, **options) <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/connection.py", line 1192, in get_connection <br>
backend_1  |     connection.connect() <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/connection.py", line 563, in connect <br>
backend_1  |     raise ConnectionError(self._error_message(e)) <br>
backend_1  | redis.exceptions.ConnectionError: Error 99 connecting to localhost:36379. Cannot assign requested address. <br>
backend_1  | 172.19.0.1 - - [08/Nov/2021 21:30:44] "GET /count HTTP/1.1" 500 - <br>
backend_1  | [2021-11-08 21:48:49,138] ERROR in app: Exception on /count [GET] <br>
backend_1  | Traceback (most recent call last): <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/connection.py", line 559, in connect <br>
backend_1  |     sock = self._connect() <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/connection.py", line 615, in _connect <br>
backend_1  |     raise err <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/connection.py", line 603, in _connect <br>
backend_1  |     sock.connect(socket_address) <br>
backend_1  | OSError: [Errno 99] Cannot assign requested address <br>
backend_1  |  <br>
backend_1  | During handling of the above exception, another exception occurred: <br>
backend_1  |  <br>
backend_1  | Traceback (most recent call last): <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 2073, in wsgi_app <br>
backend_1  |     response = self.full_dispatch_request() <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1518, in full_dispatch_request <br>
backend_1  |     rv = self.handle_user_exception(e) <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1516, in full_dispatch_request <br>
backend_1  |     rv = self.dispatch_request() <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/flask/app.py", line 1502, in dispatch_request <br>
backend_1  |     return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args) <br>
backend_1  |   File "/code.py", line 10, in count <br>
backend_1  |     r.incr('hits') <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/client.py", line 1641, in incr <br>
backend_1  |     return self.incrby(name, amount) <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/client.py", line 1650, in incrby <br>
backend_1  |     return self.execute_command('INCRBY', name, amount) <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/client.py", line 898, in execute_command <br>
backend_1  |     conn = self.connection or pool.get_connection(command_name, **options) <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/connection.py", line 1192, in get_connection <br>
backend_1  |     connection.connect() <br>
backend_1  |   File "/usr/local/lib/python3.8/dist-packages/redis/connection.py", line 563, in connect <br>
backend_1  |     raise ConnectionError(self._error_message(e)) <br>
backend_1  | redis.exceptions.ConnectionError: Error 99 connecting to localhost:36379. Cannot assign requested address. <br>
backend_1  | 172.19.0.1 - - [08/Nov/2021 21:48:49] "GET /count HTTP/1.1" 500 - <br>
</pre>
</html>

Do you think there's any more information about the bug here?

<div class="nav">
[[Yes -> Long error logs 2]]
[[No -> Long error logs 2]]
</div>

:: Long error logs 2

The error logs have a lot in them, but the most important thing is that it
can't connect to <code>localhost:36379</code> -- there's nothing else relevant.

<div class="nav">
[[Go back -> Error]]
</div>



:: Python program

<p>
Here's what your Python program looks like:
</p>

<html>
<pre>
import redis <br>
import flask <br>
 <br>
print("starting") <br>
app = flask.Flask(__name__) <br>
r = redis.Redis(host='localhost', port=36379, db=0) <br>
 <br>
@app.route('/count') <br>
def count(): <br>
    r.incr('hits') <br>
    return 'This page has been viewed %s times.' % r.get('hits') <br>
 <br>
app.run(host='0.0.0.0', port=3000) <br>
</pre>
</html>

The reason this is failing is pretty clear -- this line of code:

<html>
<pre>
r = redis.Redis(host='localhost', port=36379, db=0)
</pre>
</html>

<p>
is trying to connect to <code>localhost:36379</code>, but Redis isn't running on that port.
</p>

<p>
Next, we need to figure out why Redis isn't running on  <code>localhost:36379</code>! Here are some options:
</p>



<div class="nav">
[[Check if Redis is running -> check redis running]]
[[Read docker-compose.yaml -> docker-compose yaml]]
[[Ping the container -> ping container]]
</div>

:: check redis running

You decide to check if Redis is running.

<<ask "How can you find out if Redis is running?" "$redis" "redis running 2">>

:: redis running 2

<<you-said "You said:" $redis>>

This game isn't very smart, so it only knows about 2 options. Hopefully one of these is what you said:

<div class="nav">
[[use the Redis CLI -> redis-cli]]
[[use telnet -> telnet]]
[[look at the logs -> look at logs]]
</div>

:: look at logs

You run <code>docker-compose logs redis</code> to look at the logs. Here's what you see:

<html>
<pre>
Attaching to cache
08 Nov 2021 20:27:21.946 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
08 Nov 2021 20:27:21.946 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started
08 Nov 2021 20:27:21.946 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
08 Nov 2021 20:27:21.946 * monotonic clock: POSIX clock_gettime
08 Nov 2021 20:27:21.946 * Running mode=standalone, port=6379.
08 Nov 2021 20:27:21.947 # Server initialized
08 Nov 2021 20:27:21.947 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
08 Nov 2021 20:27:21.947 * Ready to accept connections
gnal-handler (1636403244) Received SIGTERM scheduling shutdown...
08 Nov 2021 20:27:24.355 # User requested shutdown...
08 Nov 2021 20:27:24.355 * Saving the final RDB snapshot before exiting.
08 Nov 2021 20:27:24.356 * DB saved on disk
08 Nov 2021 20:27:24.356 # Redis is now ready to exit, bye bye...
08 Nov 2021 20:27:27.078 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
08 Nov 2021 20:27:27.079 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started
08 Nov 2021 20:27:27.079 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
08 Nov 2021 20:27:27.079 * monotonic clock: POSIX clock_gettime
08 Nov 2021 20:27:27.079 * Running mode=standalone, port=6379.
08 Nov 2021 20:27:27.080 # Server initialized
08 Nov 2021 20:27:27.080 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
08 Nov 2021 20:27:27.080 * Loading RDB produced by version 6.2.6
08 Nov 2021 20:27:27.080 * RDB age 3 seconds
08 Nov 2021 20:27:27.080 * RDB memory usage when created 0.77 Mb
08 Nov 2021 20:27:27.080 # Done loading RDB, keys loaded: 0, keys expired: 0.
08 Nov 2021 20:27:27.080 * DB loaded from disk: 0.000 seconds
08 Nov 2021 20:27:27.080 * Ready to accept connections
gnal-handler (1636403286) Received SIGTERM scheduling shutdown...
08 Nov 2021 20:28:06.179 # User requested shutdown...
08 Nov 2021 20:28:06.179 * Saving the final RDB snapshot before exiting.
08 Nov 2021 20:28:06.184 * DB saved on disk
08 Nov 2021 20:28:06.184 # Redis is now ready to exit, bye bye...
08 Nov 2021 20:28:08.294 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
08 Nov 2021 20:28:08.294 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started
08 Nov 2021 20:28:08.294 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
08 Nov 2021 20:28:08.295 * monotonic clock: POSIX clock_gettime
08 Nov 2021 20:28:08.295 * Running mode=standalone, port=6379.
08 Nov 2021 20:28:08.295 # Server initialized
08 Nov 2021 20:28:08.296 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
08 Nov 2021 20:28:08.296 * Loading RDB produced by version 6.2.6
08 Nov 2021 20:28:08.296 * RDB age 2 seconds
08 Nov 2021 20:28:08.296 * RDB memory usage when created 0.77 Mb
08 Nov 2021 20:28:08.296 # Done loading RDB, keys loaded: 0, keys expired: 0.
08 Nov 2021 20:28:08.296 * DB loaded from disk: 0.000 seconds
08 Nov 2021 20:28:08.296 * Ready to accept connections
gnal-handler (1636403298) Received SIGTERM scheduling shutdown...
08 Nov 2021 20:28:18.221 # User requested shutdown...
08 Nov 2021 20:28:18.221 * Saving the final RDB snapshot before exiting.
08 Nov 2021 20:28:18.223 * DB saved on disk
08 Nov 2021 20:28:18.224 # Redis is now ready to exit, bye bye...
08 Nov 2021 20:28:29.015 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
08 Nov 2021 20:28:29.015 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started
08 Nov 2021 20:28:29.015 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
08 Nov 2021 20:28:29.015 * monotonic clock: POSIX clock_gettime
08 Nov 2021 20:28:29.016 * Running mode=standalone, port=6379.
08 Nov 2021 20:28:29.016 # Server initialized
08 Nov 2021 20:28:29.016 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
08 Nov 2021 20:28:29.016 * Loading RDB produced by version 6.2.6
08 Nov 2021 20:28:29.016 * RDB age 11 seconds
08 Nov 2021 20:28:29.016 * RDB memory usage when created 0.77 Mb
08 Nov 2021 20:28:29.016 # Done loading RDB, keys loaded: 0, keys expired: 0.
08 Nov 2021 20:28:29.016 * DB loaded from disk: 0.000 seconds
08 Nov 2021 20:28:29.016 * Ready to accept connections
08 Nov 2021 21:26:54.028 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
08 Nov 2021 21:26:54.028 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started
08 Nov 2021 21:26:54.028 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
08 Nov 2021 21:26:54.029 * monotonic clock: POSIX clock_gettime
08 Nov 2021 21:26:54.029 * Running mode=standalone, port=6379.
08 Nov 2021 21:26:54.029 # Server initialized
08 Nov 2021 21:26:54.029 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
08 Nov 2021 21:26:54.030 * Loading RDB produced by version 6.2.6
08 Nov 2021 21:26:54.030 * RDB age 3516 seconds
08 Nov 2021 21:26:54.030 * RDB memory usage when created 0.77 Mb
08 Nov 2021 21:26:54.030 # Done loading RDB, keys loaded: 0, keys expired: 0.
08 Nov 2021 21:26:54.030 * DB loaded from disk: 0.000 seconds
08 Nov 2021 21:26:54.030 * Ready to accept connections
08 Nov 2021 21:28:04.403 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
08 Nov 2021 21:28:04.403 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started
08 Nov 2021 21:28:04.403 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
08 Nov 2021 21:28:04.404 * monotonic clock: POSIX clock_gettime
08 Nov 2021 21:28:04.404 * Running mode=standalone, port=6379.
08 Nov 2021 21:28:04.404 # Server initialized
08 Nov 2021 21:28:04.404 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
08 Nov 2021 21:28:04.404 * Loading RDB produced by version 6.2.6
08 Nov 2021 21:28:04.405 * RDB age 3586 seconds
08 Nov 2021 21:28:04.405 * RDB memory usage when created 0.77 Mb
08 Nov 2021 21:28:04.405 # Done loading RDB, keys loaded: 0, keys expired: 0.
08 Nov 2021 21:28:04.405 * DB loaded from disk: 0.000 seconds
08 Nov 2021 21:28:04.405 * Ready to accept connections
08 Nov 2021 21:28:27.646 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
08 Nov 2021 21:28:27.646 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started
08 Nov 2021 21:28:27.646 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
08 Nov 2021 21:28:27.646 * monotonic clock: POSIX clock_gettime
08 Nov 2021 21:28:27.647 * Running mode=standalone, port=6379.
08 Nov 2021 21:28:27.647 # Server initialized
08 Nov 2021 21:28:27.647 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
08 Nov 2021 21:28:27.647 * Loading RDB produced by version 6.2.6
08 Nov 2021 21:28:27.647 * RDB age 3609 seconds
08 Nov 2021 21:28:27.647 * RDB memory usage when created 0.77 Mb
08 Nov 2021 21:28:27.647 # Done loading RDB, keys loaded: 0, keys expired: 0.
08 Nov 2021 21:28:27.647 * DB loaded from disk: 0.000 seconds
08 Nov 2021 21:28:27.647 * Ready to accept connections
09 Nov 2021 22:10:54.715 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
09 Nov 2021 22:10:54.716 # Redis version=6.2.6, bits=64, commit=00000000, modified=0, pid=1, just started
09 Nov 2021 22:10:54.716 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
09 Nov 2021 22:10:54.717 * monotonic clock: POSIX clock_gettime
09 Nov 2021 22:10:54.718 * Running mode=standalone, port=6379.
09 Nov 2021 22:10:54.718 # Server initialized
09 Nov 2021 22:10:54.718 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
09 Nov 2021 22:10:54.719 * Loading RDB produced by version 6.2.6
09 Nov 2021 22:10:54.719 * RDB age 92556 seconds
09 Nov 2021 22:10:54.719 * RDB memory usage when created 0.77 Mb
09 Nov 2021 22:10:54.719 # Done loading RDB, keys loaded: 0, keys expired: 0.
09 Nov 2021 22:10:54.719 * DB loaded from disk: 0.000 seconds
09 Nov 2021 22:10:54.719 * Ready to accept connections
</pre>
</html>

What do you think? Is Redis running?

<div class="nav">
[[Yes -> logs 2]]
[[No -> logs 2]]
</div>

:: logs 2

The logs look pretty good, but you still don't feel 100% sure Redis is running.
You'd prefer to actually connect to the Redis service to be sure.

<div class="nav">
[[Go back -> redis running 2]]
</div>

:: redis-cli

<p>
You run <code>redis-cli</code> to connect to the Redis instance at <code>localhost:36379</code> Here's
what you see:
</p>

<html>
<pre>
$ redis-cli -h localhost -p 36379 keys "*" <br>
 <br>
(empty array)
</pre>
</html>

<p>
What do you think? Does this mean Redis is running?
</p>

<div class="nav">
[[Yes -> redis-cli 2]]
[[No -> redis-cli 2]]
</div>

:: redis-cli 2

<p>
The <code>(empty array)</code> output means that we successfully connected to
Redis, but that the Redis instance is empty. So, it worked!
</p>

<<newinfo "You <strong>can</strong> connect to Redis at localhost:36379 from the command line">>

Now you have a mystery on your hands -- why does connecting to
<code>localhost:36379</code> work when you do it on the command line, but not
from the Python server?

<<ask "What can we do to find out more about this?" "$investigate" "investigate">>



:: telnet

You run <code>telnet</code> to connect to <code>localhost:36379</code> Here's what you see:

<html>
<pre>
$ telnet localhost 36379
Trying ::1...
Connected to localhost.
Escape character is '^]'.
</pre>
</html>

What does this mean? Is Redis running?

<div class="nav">
[[Yes -> telnet 2]]
[[No -> telnet 2]]
</div>

:: telnet 2

This telnet output means that <i>something</i> is running on
<code>localhost:36379</code>, and it's probably Redis.

<<newinfo "You <strong>can</strong> connect to Redis at localhost:36379 from the command line">>

Now you have a mystery on your hands -- why does connecting to
<code>localhost:36379</code> work when you do it on the command line, but not
from the Python server?

<<ask "What can we do to find out more about this?" "$investigate" "investigate">>

:: investigate

<<you-said "Your idea for how to investigate:" $investigate>>

<p>
We tried connecting to <code>localhost:36379</code> and it worked. But we
didn't try connecting to <code>localhost:36379</code> from <code>inside</code>
the Python Docker container.
</p>

<p>
Let's try that! How can we run commands inside the Python Docker container?
</p>

<<ask "How can we run commands inside the Docker container?" "$inside" "investigate 2">>

:: investigate 2

<<you-said "You said" $inside>>

<p>
We can start a shell inside the Python container with <code>docker-compose exec backend /bin/bash</code>.
</p>

<html>
<pre>
docker-compose exec backend /bin/bash
root@31762eeecfda:/# 
</pre>
</html>

<p>
You use the shell to run <code>redis-cli</code> inside the Python container.
</p>

<html>
<pre>
root@31762eeecfda:/# redis-cli -h localhost -p 36379 keys "*"
bash: redis-cli: command not found
root@31762eeecfda:/# 
</pre>
</html>

<p>
Oops, the Redis CLI isn't installed inside the Python container.
</p>

<div class="nav">
[[Install the Redis CLI -> investigate 3]]
</div>

:: investigate 3

<p>
You're in an Ubuntu container, so this is pretty straightforward to fix -- you install the Redis CLI with <code> apt-get update && apt-get install redis </code>.
</p>

Once that's done, you can run it.

<html>
<pre>
root@31762eeecfda:/# redis-cli -h localhost -p 36379 keys "*"
Could not connect to Redis at localhost:36379: Connection refused
</pre>
</html>

<<newinfo "You <strong>can't</strong> connect to Redis at localhost:36379 from the command line <strong>inside the container</strong>">>


:: docker-compose yaml

Here are the contents of <code>docker-compose.yaml</code>. This is the file
where the container's networking is configured.

<html>
<pre>
version: "3" <br>
services: <br>
  backend: <br>
    build: '.' <br>
    ports: <br>
      - "3000:3000" <br>
  redis: <br>
    image: redis <br>
    container_name: cache <br>
    ports: <br>
      - 36379:6379 <br>
    restart: always
</pre>
</html>

<div class="nav">
[[This looks good, go back -> Python program]]
[[Does this look good? -> docker-compose 2]]
</div>

:: docker-compose 2

<p>
Everything is good! This file is mapping port 6379 inside the container to port 36379 outside the
container.
</p>

<p>
</p>

[[Go back -> Python program]]

:: ping container

You try to ping the container to see if it's up, but can't figure out how to do
it. After some quick Googling, it looks like you can't ping a Docker container
on Mac.

<div class="nav">
[[Go back -> Python program]]
</div>

:: StoryCaption

<div style="text-align: left">

<strong>Files:</strong>

<p style="font-family: monospace; padding-left: 1em;">
<<link "code.py">>
  <<script>>
    Dialog.setup("code.py");
    Dialog.wiki(`
<html>
<pre>
import redis <br>
import flask <br>
 <br>
print("starting") <br>
app = flask.Flask(__name__) <br>
r = redis.Redis(host='localhost', port=36379, db=0) <br>
 <br>
@app.route('/count') <br>
def count(): <br>
    r.incr('hits') <br>
    return 'This page has been viewed %s times.' % r.get('hits') <br>
 <br>
app.run(host='0.0.0.0', port=3000) 
</pre>
</html>
`);
    Dialog.open();
  <</script>>
<</link>>

<br>

<<link "docker-compose.yaml">>
  <<script>>
    Dialog.setup("docker-compose.yaml");
    Dialog.wiki(`
<html>
<pre>
version: "3" <br>
services: <br>
  backend: <br>
    build: '.' <br>
    ports: <br>
      - "3000:3000" <br>
  redis: <br>
    image: redis <br>
    container_name: cache <br>
    ports: <br>
      - 36379:6379 <br>
    restart: always
</pre>
</html>
`);
    Dialog.open();
  <</script>>
  <</link>>
</p>


<strong>What you know:</strong>
<<if $knowledge.size eq 0>> nothing yet!
<<else>>
<ol> <<for _i, _name range $knowledge>> <li> _name</li> <</for>> </ol>
<</if>>
</div>

<div style="margin-top: 4em">
<a href="/"><< Back to all puzzles</a>
</div>


